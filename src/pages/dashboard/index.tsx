import Head from "next/head";
import Link from "next/link";

import { Card, Metric, Text } from "@tremor/react";
import {
  BookCopy,
  Clock,
  CopyCheck,
  Eye,
  GraduationCap,
  Home,
  Settings,
  UserCog,
  UserPlus,
  Users,
} from "lucide-react";
import {
  type GetServerSidePropsContext,
  type InferGetServerSidePropsType,
} from "next";
import { getServerSession, type Session } from "next-auth";
import { signIn, signOut } from "next-auth/react";
import Image from "next/image";
import { ModeToggle } from "~/components/theme-toggle";
import { Avatar, AvatarFallback, AvatarImage } from "~/components/ui/avatar";
import { Button, buttonVariants } from "~/components/ui/button";
import { authOptions } from "~/server/auth";
import { db } from "~/server/db";
import { inter } from "~/styles/fonts";
import { cn } from "~/utils/shadcn";

export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
  const studentCount = await db.student.count();
  const lectureCount = await db.lecture.count();
  const moduleCount = await db.module.count();
  const attendanceCount = await db.attendanceRecord.count();
  const enrollmentCount = await db.enrollment.count();

  const session = await getServerSession(ctx.req, ctx.res, authOptions);

  return {
    props: {
      sessionData: session,
      counts: {
        studentCount,
        lectureCount,
        moduleCount,
        attendanceCount,
        enrollmentCount,
      },
    },
  };
};

export default function Dashboard({
  sessionData,
  counts,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={`${inter.className} flex min-h-screen gap-4 bg-neutral-100 antialiased dark:bg-neutral-800`}
      >
        {/* Sidebar */}
        <aside className="hidden h-screen w-64 shrink-0 md:block">
          <div className="flex h-full flex-col justify-between overflow-y-auto bg-white px-3 py-4 dark:bg-neutral-900">
            <div>
              {/* Logo */}
              <div className="flex items-center gap-3">
                <Image src="/logo.png" width={36} height={36} alt="UniTrack" />
                <p className="text-3xl font-bold text-neutral-800 dark:text-neutral-100">
                  UniTrack
                </p>
              </div>

              {/* Nav Links */}
              <div className="mt-8 flex flex-col gap-4">
                <Link
                  href="#"
                  className={cn(
                    buttonVariants({ variant: "secondary" }),
                    "justify-start text-base dark:bg-neutral-700 dark:hover:bg-neutral-700/75",
                  )}
                >
                  <Home size={22} className="mr-2" />
                  Home
                </Link>
                <Link
                  href="#"
                  className={cn(
                    buttonVariants({ variant: "secondary" }),
                    "justify-start text-base",
                  )}
                >
                  <UserCog size={22} className="mr-2" />
                  Manage
                </Link>
                <Link
                  href="#"
                  className={cn(
                    buttonVariants({ variant: "secondary" }),
                    "justify-start text-base",
                  )}
                >
                  <Settings size={22} className="mr-2" />
                  Settings
                </Link>
              </div>
            </div>

            {/* Login / Logout Button */}
            <div>
              <LoginLogoutButton sessionData={sessionData} />
            </div>
          </div>
        </aside>

        {/* Content */}
        <div className="container mt-8 flex flex-col gap-4">
          <div className="flex">
            <Link href="/dashboard" className="text-3xl font-bold">
              Dashboard
            </Link>
            <div className="ml-auto">
              <ModeToggle />
            </div>
          </div>
          <div>
            <p className="text-xl font-semibold">Quick Stats</p>
            <div className="mt-4 flex flex-1 flex-wrap gap-4 md:flex-nowrap">
              <Card className="" decoration="top" decorationColor="indigo">
                <Text className="mb-2 flex items-center">
                  <Users size={16} className="mr-2" />
                  Students
                </Text>
                <Metric>{counts.studentCount}</Metric>
              </Card>
              <Card className="" decoration="top" decorationColor="indigo">
                <Text className="mb-2 flex items-center">
                  <Clock size={16} className="mr-2" />
                  Lectures
                </Text>
                <Metric>{counts.lectureCount}</Metric>
              </Card>
              <Card className="" decoration="top" decorationColor="indigo">
                <Text className="mb-2 flex items-center">
                  <BookCopy size={16} className="mr-2" />
                  Modules
                </Text>
                <Metric>{counts.moduleCount}</Metric>
              </Card>
              <Card className="" decoration="top" decorationColor="indigo">
                <Text className="mb-2 flex items-center">
                  <CopyCheck size={16} className="mr-2" />
                  Records
                </Text>
                <Metric>{counts.attendanceCount}</Metric>
              </Card>
              <Card className="" decoration="top" decorationColor="indigo">
                <Text className="mb-2 flex items-center">
                  <GraduationCap size={16} className="mr-2" />
                  Enrollments
                </Text>
                <Metric>{counts.enrollmentCount}</Metric>
              </Card>
            </div>
          </div>
          <div className="mt-8 flex flex-col items-center justify-center gap-4">
            <Link
              href="/dashboard/register"
              className={buttonVariants({ size: "xl" })}
            >
              <UserPlus className="mr-2" />
              Register New Data
            </Link>
            <Link
              href="/dashboard/view"
              className={buttonVariants({ size: "xl" })}
            >
              <Eye className="mr-2" />
              View Database
            </Link>
          </div>
        </div>
      </main>
    </>
  );
}

function LoginLogoutButton({ sessionData }: { sessionData: Session | null }) {
  return (
    <div>
      {/* WHEN SIGNED OUT */}
      {!sessionData && (
        <Button
          className="w-full"
          variant={"secondary"}
          onClick={() => signIn()}
        >
          Sign in
        </Button>
      )}

      {/* WHEN SIGNED IN */}
      {sessionData && (
        <div className="flex flex-row gap-4">
          <div className="flex flex-col">
            {sessionData && (
              <span className="text-md">Hi, {sessionData.user?.name}</span>
            )}

            <Button
              className="h-4 justify-start pl-0 text-sm text-neutral-500"
              variant={"link"}
              size={"sm"}
              onClick={() => signOut()}
            >
              Sign out
            </Button>
          </div>

          {sessionData?.user.image && (
            <Avatar className="ml-auto">
              <AvatarImage src={sessionData?.user?.image} />
              <AvatarFallback>DP</AvatarFallback>
            </Avatar>
          )}
        </div>
      )}
    </div>
  );
}
