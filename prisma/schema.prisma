// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Student {
    studentId     String @id @default(cuid())
    studentCardId String @unique
    firstName     String
    lastName      String

    // Prisma relations
    AttendanceRecords AttendanceRecord[]
    Enrollments       Enrollment[]
}

model Module {
    moduleId   String  @id @default(cuid())
    moduleName String
    moduleDesc String?

    // Prisma relations
    Lectures    Lecture[]
    Enrollments Enrollment[]
}

model Lecture {
    lectureId String   @id @default(cuid())
    startTime DateTime
    endTime   DateTime

    // Foreign keys
    moduleId String

    // Prisma relations
    Module            Module             @relation(fields: [moduleId], references: [moduleId])
    AttendanceRecords AttendanceRecord[]
}

model AttendanceRecord {
    attendanceRecordId String   @id @unique @default(cuid())
    status             Status
    timestamp          DateTime @default(now())

    // Foreign keys
    studentId String
    lectureId String

    // Prisma relations
    Student Student @relation(fields: [studentId], references: [studentId])
    Lecture Lecture @relation(fields: [lectureId], references: [lectureId])
}

model Enrollment {
    enrollmentId String @id @default(cuid())

    // Foreign keys
    studentId String
    moduleId  String

    // Prisma relations
    Student Student @relation(fields: [studentId], references: [studentId])
    Module  Module  @relation(fields: [moduleId], references: [moduleId])
}

enum Status {
    PRESENT
    ABSENT
    LATE
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(GUEST)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

enum Role {
    SUPERADMIN
    ADMIN
    TEACHER
    STUDENT
    GUEST
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Example table from T3 setup. Keeping this for testing, delete this later
model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}
