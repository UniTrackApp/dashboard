// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model AttendanceRecord {
    attendanceRecordId String   @id @default(cuid())
    classroomId        String
    date               DateTime
    status             Status   @default(PRESENT)

    studentId String
    student   Student @relation(fields: [studentId], references: [studentId])
    lectureId String
    Lecture   Lecture @relation(fields: [lectureId], references: [lectureId])
}

// All good
model Student {
    studentId     String  @id @unique @default(cuid())
    studentCardId String  @unique
    firstName     String
    lastName      String?

    attendanceRecord AttendanceRecord[]
    course           Course[]
}

model Course {
    courseId   String @id @default(cuid())
    courseName String

    moduleId         String
    module           Module[]   @relation(fields: [moduleId], references: [moduleId])
    Student          Student? @relation(fields: [studentStudentId], references: [studentId])
    studentStudentId String?
}

model Module {
    moduleId   String    @id @default(cuid())
    moduleName String?
    moduleCode String?
    schedule   String?
    lecture    Lecture[]

    studentId String?
    student   Student? @relation(fields: [studentId], references: [studentId])
    Course    Course[]

    @@map("Module")
}

model Lecture {
    lectureId   String @id @default(cuid())
    lectureName String
    lectureCode String

    moduleId           String
    module             Module             @relation(fields: [moduleId], references: [moduleId])
    classroomId        String
    classroom          Classroom          @relation(fields: [classroomId], references: [classroomId])
    attendanceRecordId String
    attendanceRecord   AttendanceRecord[]
}

model Classroom {
    classroomId   String @id @default(cuid())
    classroomName String
    capacity      Int?

    Lecture Lecture[]
}

enum Status {
    PRESENT
    ABSENT
    LATE
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Example table from T3 setup. Keeping this for testing, delete this later
model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}
